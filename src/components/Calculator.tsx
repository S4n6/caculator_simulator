import React, { useState, useCallback } from "react";
import Display from "./Display";
import Keypad from "./Keypad";
import WalkingCatAnimation from "./WalkingCatAnimation";
import { clickSound } from "../utils/clickSound";
import {
  evaluateExpression,
  canAddOperator,
  canAddNumber,
  formatExpression,
  convertBetweenFractionAndDecimal,
} from "../utils/calculatorUtils";
import { compile } from "mathjs";

const Calculator: React.FC = () => {
  const [expression, setExpression] = useState<string>("");
  const [result, setResult] = useState<string>("0");
  const [isNewCalculation, setIsNewCalculation] = useState<boolean>(true);

  // Th√™m state ƒë·ªÉ l∆∞u c√¢u tr·∫£ l·ªùi cu·ªëi c√πng cho n√∫t Ans
  const [lastAnswer, setLastAnswer] = useState<string>("0");

  // Th√™m state cho ch·∫ø ƒë·ªô SHIFT v√† ALPHA
  const [isShiftActive, setIsShiftActive] = useState<boolean>(false);
  const [isAlphaActive, setIsAlphaActive] = useState<boolean>(false);

  // Th√™m state cho tr·∫°ng th√°i m√°y t√≠nh (b·∫≠t/t·∫Øt)
  const [isCalculatorOn, setIsCalculatorOn] = useState<boolean>(true);

  // Th√™m state cho ch·∫ø ƒë·ªô ƒë·ªì th·ªã
  const [currentMode, setCurrentMode] = useState<"calculator" | "graph">(
    "calculator"
  );
  const [functionInput, setFunctionInput] = useState<string>("");
  const [graphPoints, setGraphPoints] = useState<
    Array<{ x: number; y: number }>
  >([]);

  // H√†m ph√°t √¢m thanh theo lo·∫°i n√∫t
  const playSoundForButtonType = useCallback((type: string) => {
    switch (type) {
      case "number":
        clickSound.playNumberClick();
        break;
      case "operator":
        clickSound.playOperatorClick();
        break;
      case "function":
      case "scientific_function_top_row":
      case "scientific_function_trig_row":
      case "new_scientific_function":
        clickSound.playFunctionClick();
        break;
      case "special":
      case "control":
      case "mode":
        clickSound.playSpecialClick();
        break;
      default:
        clickSound.playNumberClick();
        break;
    }
  }, []);

  // H√†m toggle c√°c ch·∫ø ƒë·ªô
  const toggleShift = useCallback(() => {
    if (!isCalculatorOn) return; // Kh√¥ng ho·∫°t ƒë·ªông khi m√°y t·∫Øt
    setIsShiftActive(!isShiftActive);
    setIsAlphaActive(false); // T·∫Øt Alpha khi b·∫≠t Shift
  }, [isShiftActive, isCalculatorOn]);

  const toggleAlpha = useCallback(() => {
    if (!isCalculatorOn) return; // Kh√¥ng ho·∫°t ƒë·ªông khi m√°y t·∫Øt
    setIsAlphaActive(!isAlphaActive);
    setIsShiftActive(false); // T·∫Øt Shift khi b·∫≠t Alpha
  }, [isAlphaActive, isCalculatorOn]);

  const resetModes = useCallback(() => {
    setIsShiftActive(false);
    setIsAlphaActive(false);
  }, []);

  // H√†m t·∫Øt m√°y t√≠nh
  const turnOffCalculator = useCallback(() => {
    console.log("üî¥ Turning OFF calculator");
    setIsCalculatorOn(false);

    // Reset t·∫•t c·∫£ c√°c ch·∫ø ƒë·ªô
    setCurrentMode("calculator");
    setFunctionInput("");
    setGraphPoints([]);

    // Reset calculator state
    setExpression("");
    setResult("0");
    setLastAnswer("0");
    setIsNewCalculation(true);
    resetModes();
    clickSound.playSpecialClick();
  }, [resetModes]);

  // H√†m b·∫≠t m√°y t√≠nh
  const turnOnCalculator = useCallback(() => {
    console.log("üü¢ Turning ON calculator");
    setIsCalculatorOn(true);

    // Reset t·∫•t c·∫£ c√°c ch·∫ø ƒë·ªô v·ªÅ m·∫∑c ƒë·ªãnh
    setCurrentMode("calculator");
    setFunctionInput("");
    setGraphPoints([]);

    // Reset calculator state
    setExpression("");
    setResult("0");
    setLastAnswer("0");
    setIsNewCalculation(true);
    resetModes();
    clickSound.playSpecialClick(); // √Çm thanh b·∫≠t m√°y
  }, [resetModes]);

  // H√†m x·ª≠ l√Ω ƒë·ªì th·ªã
  const calculateGraphPoints = useCallback((funcString: string) => {
    try {
      console.log("üîß Original function string:", `"${funcString}"`);

      // Ki·ªÉm tra chu·ªói h√†m s·ªë c√≥ h·ª£p l·ªá kh√¥ng
      if (!funcString || funcString.trim().length === 0) {
        console.warn("‚ùå Empty function string");
        setGraphPoints([]);
        return;
      }

      // Chu·∫©n h√≥a chu·ªói h√†m s·ªë v·ªõi c√°c b∆∞·ªõc chi ti·∫øt h∆°n
      let normalizedFunc = funcString.trim();

      // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
      normalizedFunc = normalizedFunc.replace(/\s+/g, "");

      // Ki·ªÉm tra xem c√≥ ch·ª©a bi·∫øn x kh√¥ng
      if (!normalizedFunc.includes("x")) {
        console.warn("‚ùå Function must contain variable 'x'");
        setGraphPoints([]);
        return;
      }

      // Gi·ªØ nguy√™n ^ v√¨ mathjs h·ªó tr·ª£ c·∫£ ^ v√† **
      // Ch·ªâ th√™m * gi·ªØa s·ªë v√† bi·∫øn (2x -> 2*x)
      normalizedFunc = normalizedFunc.replace(/(\d)([a-zA-Z])/g, "$1*$2");

      // Th√™m * gi·ªØa bi·∫øn v√† s·ªë (x2 -> x*2)
      normalizedFunc = normalizedFunc.replace(/([a-zA-Z])(\d)/g, "$1*$2");

      // Th√™m * gi·ªØa ) v√† ( ho·∫∑c bi·∫øn
      normalizedFunc = normalizedFunc.replace(/\)([a-zA-Z(])/g, ")*$1");
      normalizedFunc = normalizedFunc.replace(/([a-zA-Z])\(/g, "$1*(");

      console.log("‚úÖ Normalized function:", `"${normalizedFunc}"`);

      // Ki·ªÉm tra xem chu·ªói ƒë√£ normalize c√≥ h·ª£p l·ªá kh√¥ng
      if (normalizedFunc.length === 0) {
        console.warn("‚ùå Normalized function is empty");
        setGraphPoints([]);
        return;
      }

      const expr = compile(normalizedFunc);
      const points: Array<{ x: number; y: number }> = [];

      // T√≠nh to√°n ƒëi·ªÉm t·ª´ -10 ƒë·∫øn 10 v·ªõi b∆∞·ªõc 0.1
      for (let x = -10; x <= 10; x += 0.1) {
        try {
          const y = expr.evaluate({ x });
          if (typeof y === "number" && !isNaN(y) && isFinite(y)) {
            points.push({ x: Math.round(x * 10) / 10, y });
          }
        } catch (error) {
          // B·ªè qua ƒëi·ªÉm l·ªói
        }
      }

      setGraphPoints(points);
      console.log(
        `üìä Generated ${points.length} graph points for: ${funcString} -> ${normalizedFunc}`
      );
    } catch (error) {
      console.error("Graph calculation error:", error);
      console.error(
        "Error details:",
        error instanceof Error ? error.message : String(error)
      );
      setGraphPoints([]);
    }
  }, []);

  const handleCalculateGraph = useCallback(() => {
    console.log(
      "üéØ handleCalculateGraph called with functionInput:",
      functionInput
    );
    if (functionInput.trim()) {
      calculateGraphPoints(functionInput);
    } else {
      console.log("‚ùå No function input to calculate");
    }
  }, [functionInput, calculateGraphPoints]);

  const toggleGraphMode = useCallback(() => {
    if (currentMode === "calculator") {
      setCurrentMode("graph");
      setFunctionInput("x^2"); // S·ª≠ d·ª•ng ^ v√¨ mathjs hi·ªÉu c·∫£ ^ v√† **
      calculateGraphPoints("x^2");
    } else {
      setCurrentMode("calculator");
      setFunctionInput("");
      setGraphPoints([]);
    }
    resetModes();
  }, [currentMode, resetModes, calculateGraphPoints]);

  // X·ª≠ l√Ω khi nh·∫•n n√∫t v·ªõi logic SHIFT/ALPHA
  const handleButtonClick = useCallback(
    (
      value: string,
      type:
        | "number"
        | "operator"
        | "function"
        | "special"
        | "control"
        | "mode"
        | "scientific_function_top_row"
        | "scientific_function_trig_row"
        | "new_scientific_function"
    ) => {
      if (value === "power_on") {
        if (!isCalculatorOn) {
          turnOnCalculator();
        } else {
          console.log("üîÑ ON button acting as AC (clear) and exit modes");

          // Tho√°t kh·ªèi t·∫•t c·∫£ c√°c ch·∫ø ƒë·ªô ƒë·∫∑c bi·ªát
          if (currentMode === "graph") {
            setCurrentMode("calculator");
            setFunctionInput("");
            setGraphPoints([]);
            console.log("üì§ Exited graph mode");
          }

          // Reset m√°y t√≠nh v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
          setExpression("");
          setResult("0");
          setIsNewCalculation(true);
          resetModes();
          playSoundForButtonType("special");
        }
        return;
      }

      if (!isCalculatorOn) {
        return;
      }

      playSoundForButtonType(type);

      if (value === "shift") {
        toggleShift();
        return;
      }

      if (value === "alpha") {
        toggleAlpha();
        return;
      }

      if (value === "mode") {
        if (isShiftActive) {
          // SHIFT + MODE = chuy·ªÉn ƒë·ªïi graph mode
          toggleGraphMode();
          resetModes(); // T·∫Øt SHIFT sau khi th·ª±c hi·ªán
        } else {
          // MODE b√¨nh th∆∞·ªùng = reset ch·∫ø ƒë·ªô
          resetModes();
        }
        return;
      }

      if (isShiftActive && value === "clear") {
        turnOffCalculator();
        return;
      }

      // X·ª≠ l√Ω c√°c h√†m v·ªõi SHIFT
      if (isShiftActive) {
        handleShiftFunction(value, type);
        resetModes();
        return;
      }

      // X·ª≠ l√Ω c√°c h√†m v·ªõi ALPHA
      if (isAlphaActive) {
        handleAlphaFunction(value, type);
        resetModes();
        return;
      }

      // X·ª≠ l√Ω b√¨nh th∆∞·ªùng
      switch (type) {
        case "number":
          if (currentMode === "graph") {
            handleGraphNumberInput(value);
          } else {
            handleNumberInput(value);
          }
          break;
        case "operator":
          if (currentMode === "graph") {
            handleGraphOperatorInput(value);
          } else {
            handleOperatorInput(value);
          }
          break;
        case "function":
        case "scientific_function_top_row":
        case "scientific_function_trig_row":
          if (currentMode === "graph") {
            handleGraphFunctionInput(value);
          } else {
            handleFunctionInput(value);
          }
          break;
        case "special":
        case "control":
        case "mode":
          if (currentMode === "graph") {
            handleGraphSpecialInput(value);
          } else {
            handleSpecialInput(value);
          }
          break;
        case "new_scientific_function":
          handleNewScientificFunction(value);
          break;
      }
    },
    [
      expression,
      result,
      isNewCalculation,
      isShiftActive,
      isAlphaActive,
      isCalculatorOn,
      currentMode,
      functionInput,
      playSoundForButtonType,
      turnOnCalculator,
      turnOffCalculator,
      toggleShift,
      toggleAlpha,
      resetModes,
      toggleGraphMode,
      handleCalculateGraph,
    ]
  );

  // X·ª≠ l√Ω c√°c ch·ª©c nƒÉng khoa h·ªçc m·ªõi t·ª´ fx-570ES PLUS
  const handleNewScientificFunction = (value: string) => {
    switch (value) {
      case "calc":
        // Ch·ª©c nƒÉng CALC - gi·∫£i ph∆∞∆°ng tr√¨nh
        setExpression("CALC:");
        setResult("Enter equation");
        setIsNewCalculation(false);
        break;
      case "integral":
        // T√≠ch ph√¢n
        if (isNewCalculation) {
          setExpression("‚à´(");
          setIsNewCalculation(false);
        } else {
          setExpression(expression + "‚à´(");
        }
        break;
      case "derivative":
        // ƒê·∫°o h√†m
        if (isNewCalculation) {
          setExpression("d/dx(");
          setIsNewCalculation(false);
        } else {
          setExpression(expression + "d/dx(");
        }
        break;
      case "inverse":
        // Ngh·ªãch ƒë·∫£o x‚Åª¬π
        if (isNewCalculation) {
          setExpression("1/(");
          setIsNewCalculation(false);
        } else {
          setExpression(expression + "^(-1)");
        }
        break;
      case "log_base":
        // Logarit c∆° s·ªë b·∫•t k·ª≥
        if (isNewCalculation) {
          setExpression("log_");
          setIsNewCalculation(false);
        } else {
          setExpression(expression + "log_");
        }
        break;
      case "eng":
        // Engineering notation
        if (result !== "0" && result !== "L·ªói") {
          const num = parseFloat(result);
          const engNotation = num.toExponential(2);
          setResult(engNotation);
        }
        break;
      case "s_d_conversion":
        if (
          result !== "0" &&
          result !== "L·ªói" &&
          result !== "Select constant" &&
          result !== "Conversion mode"
        ) {
          const convertedResult = convertBetweenFractionAndDecimal(result);
          setResult(convertedResult);
          setExpression(convertedResult);
          setIsNewCalculation(true);
        } else {
          setResult("No value to convert");
        }
        break;
      case "npr":
        // Ho√°n v·ªã nPr
        if (!isNewCalculation && expression) {
          setExpression(expression + "P");
        }
        break;
      case "sto":
        // Store to memory
        if (result !== "0" && result !== "L·ªói") {
          localStorage.setItem("calculatorMemory", result);
          setResult("Stored");
        }
        break;
      case "rcl":
        // Recall from memory
        const stored = localStorage.getItem("calculatorMemory");
        if (stored) {
          if (isNewCalculation) {
            setExpression(stored);
            setResult(stored);
            setIsNewCalculation(false);
          } else {
            setExpression(expression + stored);
          }
        }
        break;
      case "const":
        // Constants menu
        setExpression("CONST:");
        setResult("Select constant");
        break;
      case "conv":
        // Unit conversion
        setExpression("CONV:");
        setResult("Select units");
        break;
      case "clr":
        // Clear specific memory/history
        localStorage.removeItem("calculatorMemory");
        setResult("Memory cleared");
        break;
      case "e_notation":
        if (isNewCalculation && result !== "0" && result !== "L·ªói") {
          const newExpr = result + "E";
          setExpression(newExpr);
          setIsNewCalculation(false);
        } else if (expression && /[\d\.]$/.test(expression)) {
          const newExpr = expression + "E";
          setExpression(newExpr);
        } else if (!expression || expression === "0") {
          setExpression("1E");
          setIsNewCalculation(false);
        }
        break;
      case "yroot":
        // Root v·ªõi s·ªë m≈© t√πy √Ω  ∏‚àöx
        if (!isNewCalculation && expression) {
          setExpression(expression + "^(1/");
        }
        break;
      case "ln":
        // Natural logarithm
        handleFunctionInput("ln(");
        break;
      default:
        break;
    }
  };

  // X·ª≠ l√Ω c√°c h√†m n√¢ng cao
  const handleAdvancedFunction = (functionType: string) => {
    let newExpression = "";

    switch (functionType) {
      case "10^x":
        if (isNewCalculation) {
          newExpression = "10^(";
          setExpression(newExpression);
          setIsNewCalculation(false);
        } else {
          newExpression = expression + "10^(";
          setExpression(newExpression);
        }
        break;
      case "e":
        if (isNewCalculation) {
          newExpression = "e";
          setExpression(newExpression);
          setResult("2.718281828");
          setIsNewCalculation(false);
        } else {
          newExpression = expression + "e";
          setExpression(newExpression);
        }
        break;
      case "œÄ":
        if (isNewCalculation) {
          newExpression = "œÄ";
          setExpression(newExpression);
          setResult("3.141592654");
          setIsNewCalculation(false);
        } else {
          newExpression = expression + "œÄ";
          setExpression(newExpression);
        }
        break;
    }
  };

  // X·ª≠ l√Ω c√°c h√†m khi SHIFT ƒë∆∞·ª£c k√≠ch ho·∫°t
  const handleShiftFunction = (value: string, type: string) => {
    switch (value) {
      case "log(":
        handleAdvancedFunction("10^x"); // SHIFT + log = 10^x
        break;
      case "e^":
        handleFunctionInput("ln("); // SHIFT + e^x = ln
        break;
      case "sin(":
        handleFunctionInput("asin("); // sin‚Åª¬π
        break;
      case "cos(":
        handleFunctionInput("acos("); // cos‚Åª¬π
        break;
      case "tan(":
        handleFunctionInput("atan("); // tan‚Åª¬π
        break;
      case "^2":
        handleFunctionInput("sqrt("); // ‚àö (cƒÉn b·∫≠c 2)
        break;
      case "^3":
        handleFunctionInput("cbrt("); // ‚àõ (cƒÉn b·∫≠c 3)
        break;
      case "sqrt(":
        handleFunctionInput("^2"); // x¬≤
        break;
      case "cbrt(":
        handleFunctionInput("^3"); // x¬≥
        break;
      case "1":
        handleAdvancedFunction("œÄ"); // SHIFT + 1 = œÄ
        break;
      case "2":
        handleAdvancedFunction("e"); // SHIFT + 2 = e
        break;
      case "√∑":
        handleOperatorInput("^"); // SHIFT + √∑ = x^y
        break;

      default:
        // X·ª≠ l√Ω b√¨nh th∆∞·ªùng n·∫øu kh√¥ng c√≥ ch·ª©c nƒÉng SHIFT ƒë·∫∑c bi·ªát
        switch (type) {
          case "number":
            handleNumberInput(value);
            break;
          case "operator":
            handleOperatorInput(value);
            break;
          case "function":
            handleFunctionInput(value);
            break;
        }
        break;
    }
  };

  // X·ª≠ l√Ω c√°c h√†m khi ALPHA ƒë∆∞·ª£c k√≠ch ho·∫°t
  const handleAlphaFunction = (value: string, type: string) => {
    switch (value) {
      case "log(":
        handleFunctionInput("exp("); // ALPHA + log = exp
        break;
      case "e^":
        handleAdvancedFunction("e"); // ALPHA + e^x = e constant
        break;
      case "1":
        handleAdvancedFunction("œÄ"); // ALPHA + 1 = œÄ
        break;
      case "2":
        handleAdvancedFunction("e"); // ALPHA + 2 = e
        break;
      case "sin(":
        handleFunctionInput("sinh("); // sin hyperbolic
        break;
      case "cos(":
        handleFunctionInput("cosh("); // cos hyperbolic
        break;
      case "tan(":
        handleFunctionInput("tanh("); // tan hyperbolic
        break;
      case "√ó":
        handleOperatorInput("!"); // ALPHA + √ó = factorial
        break;
      case "(":
        handleOperatorInput("["); // ALPHA + ( = [
        break;
      case ")":
        handleOperatorInput("]"); // ALPHA + ) = ]
        break;
      default:
        // X·ª≠ l√Ω b√¨nh th∆∞·ªùng n·∫øu kh√¥ng c√≥ ch·ª©c nƒÉng ALPHA ƒë·∫∑c bi·ªát
        switch (type) {
          case "number":
            handleNumberInput(value);
            break;
          case "operator":
            handleOperatorInput(value);
            break;
          case "function":
            handleFunctionInput(value);
            break;
        }
        break;
    }
  };

  // X·ª≠ l√Ω nh·∫≠p s·ªë
  const handleNumberInput = (value: string) => {
    if (isNewCalculation) {
      setExpression(value);
      setResult(value);
      setIsNewCalculation(false);
    } else {
      if (canAddNumber(expression)) {
        const newExpression = expression + value;
        setExpression(newExpression);

        // T√≠nh to√°n realtime n·∫øu bi·ªÉu th·ª©c h·ª£p l·ªá
        // Kh√¥ng t√≠nh to√°n n·∫øu k·∫øt th√∫c b·∫±ng E (scientific notation ch∆∞a ho√†n th√†nh)
        if (!/\dE[+-]?$/.test(newExpression)) {
          try {
            const newResult = evaluateExpression(newExpression, lastAnswer);
            if (newResult !== "L·ªói" && newResult !== newExpression) {
              setResult(newResult);
            }
          } catch {
            // Kh√¥ng l√†m g√¨ n·∫øu bi·ªÉu th·ª©c ch∆∞a ho√†n ch·ªânh
          }
        }
      }
    }
  };

  // X·ª≠ l√Ω nh·∫≠p to√°n t·ª≠
  const handleOperatorInput = (value: string) => {
    if (isNewCalculation) {
      if (result !== "0" && result !== "L·ªói") {
        setExpression(result + value);
        setIsNewCalculation(false);
      }
    } else {
      if (canAddOperator(expression)) {
        setExpression(expression + value);
      } else {
        // Thay th·∫ø to√°n t·ª≠ cu·ªëi n·∫øu c√≥
        const newExpression = expression.replace(/[+\-*/^√ó√∑‚àí]$/, "") + value;
        setExpression(newExpression);
      }
    }
  };

  // X·ª≠ l√Ω nh·∫≠p h√†m
  const handleFunctionInput = (value: string) => {
    if (value === "!") {
      // Giai th·ª´a - th√™m v√†o cu·ªëi
      if (expression && !isNewCalculation) {
        const newExpression = expression + value;
        setExpression(newExpression);
        try {
          const newResult = evaluateExpression(newExpression, lastAnswer);
          setResult(newResult);
        } catch {
          setResult("L·ªói");
        }
      }
    } else {
      // C√°c h√†m kh√°c - th√™m v√†o ƒë·∫ßu
      if (isNewCalculation) {
        setExpression(value);
        setIsNewCalculation(false);
      } else {
        if (canAddNumber(expression)) {
          setExpression(expression + value);
        }
      }
    }
  };

  // X·ª≠ l√Ω c√°c ph√≠m ƒë·∫∑c bi·ªát
  const handleSpecialInput = (value: string) => {
    switch (value) {
      case "clear":
        setExpression("");
        setResult("0");
        setIsNewCalculation(true);
        break;

      case "backspace":
        if (!isNewCalculation && expression) {
          const newExpression = expression.slice(0, -1);
          setExpression(newExpression);

          if (newExpression === "") {
            setResult("0");
            setIsNewCalculation(true);
          } else {
            try {
              const newResult = evaluateExpression(newExpression, lastAnswer);
              if (newResult !== "L·ªói") {
                setResult(newResult);
              }
            } catch {
              // Gi·ªØ nguy√™n result n·∫øu bi·ªÉu th·ª©c ch∆∞a ho√†n ch·ªânh
            }
          }
        }
        break;

      case "ans":
        console.log("üîÑ Recalling last answer:", lastAnswer);
        // Answer/Result recall - hi·ªÉn th·ªã "Ans" tr√™n m√†n h√¨nh
        if (lastAnswer !== "0" && lastAnswer !== "L·ªói" && lastAnswer !== "") {
          if (isNewCalculation) {
            setExpression("Ans");
            setResult(lastAnswer); // Hi·ªÉn th·ªã gi√° tr·ªã th·ª±c t·∫ø ·ªü result
            setIsNewCalculation(false);
          } else {
            setExpression(expression + "Ans");
          }
        }
        break;

      case "negate":
        if (result !== "0" && result !== "L·ªói") {
          if (isNewCalculation) {
            const negated = result.startsWith("-")
              ? result.slice(1)
              : "-" + result;
            setResult(negated);
            setExpression(negated);
          } else {
            // Th√™m d·∫•u tr·ª´ v√†o ƒë·∫ßu bi·ªÉu th·ª©c ho·∫∑c lo·∫°i b·ªè n·∫øu ƒë√£ c√≥
            if (expression.startsWith("-")) {
              setExpression(expression.slice(1));
            } else {
              setExpression("-" + expression);
            }
          }
        }
        break;

      case "calculate":
        if (expression && !isNewCalculation) {
          // Ki·ªÉm tra bi·ªÉu th·ª©c c√≥ h·ª£p l·ªá kh√¥ng tr∆∞·ªõc khi t√≠nh to√°n
          // N·∫øu k·∫øt th√∫c b·∫±ng "E" ho·∫∑c "E-" ho·∫∑c "E+" th√¨ ch∆∞a ho√†n th√†nh
          if (/\dE[+-]?$/.test(expression.trim())) {
            setResult("Incomplete expression");
            return;
          }

          const finalResult = evaluateExpression(expression, lastAnswer);
          setResult(finalResult);
          // L∆∞u k·∫øt qu·∫£ v√†o lastAnswer n·∫øu h·ª£p l·ªá
          if (
            finalResult !== "L·ªói" &&
            finalResult !== "" &&
            finalResult !== expression
          ) {
            setLastAnswer(finalResult);
          }
          setIsNewCalculation(true);
        }
        break;
    }
  };

  // X·ª≠ l√Ω nh·∫≠p li·ªáu cho ch·∫ø ƒë·ªô ƒë·ªì th·ªã
  const handleGraphNumberInput = (value: string) => {
    setFunctionInput((prev) => prev + value);
  };

  const handleGraphOperatorInput = (value: string) => {
    let operator = value;
    // Chuy·ªÉn ƒë·ªïi c√°c k√Ω hi·ªáu
    if (value === "√ó") operator = "*";
    if (value === "√∑") operator = "/";
    if (value === "‚àí") operator = "-";
    // Gi·ªØ nguy√™n ^ v√¨ mathjs h·ªó tr·ª£

    console.log(`üìù Graph operator input: ${value} -> ${operator}`);
    setFunctionInput((prev) => prev + operator);
  };

  const handleGraphFunctionInput = (value: string) => {
    let func = value;
    // X·ª≠ l√Ω c√°c h√†m ƒë·∫∑c bi·ªát
    if (value === "sqrt(") func = "sqrt(";
    if (value === "^2") func = "^2"; // Gi·ªØ nguy√™n ^2
    if (value === "^3") func = "^3"; // Gi·ªØ nguy√™n ^3
    if (value === "^") func = "^"; // Gi·ªØ nguy√™n ^

    console.log(`üìù Graph function input: ${value} -> ${func}`);
    setFunctionInput((prev) => prev + func);
  };

  const handleGraphSpecialInput = (value: string) => {
    console.log("üîß handleGraphSpecialInput called with:", value);
    switch (value) {
      case "clear":
        setFunctionInput("x^2"); // Reset v·ªÅ h√†m m·∫´u ƒë∆°n gi·∫£n v·ªõi ^
        calculateGraphPoints("x^2");
        break;
      case "backspace":
        setFunctionInput((prev) => prev.slice(0, -1));
        break;
      case "calculate":
        console.log("üìä Calculate button pressed in graph mode");
        handleCalculateGraph();
        break;
      case "ans":
        // Trong ch·∫ø ƒë·ªô ƒë·ªì th·ªã, n√∫t Ans s·∫Ω th√™m "x" v√†o h√†m s·ªë
        setFunctionInput((prev) => prev + "x");
        break;
      default:
        break;
    }
  };
  return (
    <div
      className="w-full max-w-sm mx-auto bg-slate-700 rounded-3xl shadow-2xl overflow-hidden border-4 border-slate-800 
                    sm:max-w-md md:max-w-lg lg:max-w-xl
                    h-auto min-h-0 max-h-[92vh] 
                    my-0 sm:my-1 lg:my-1"
    >
      {/* Header v·ªõi branding CASIO */}
      <div className="bg-slate-800 p-1 sm:p-1 lg:p-2 text-center">
        <div className="flex justify-between items-start mb-1 sm:mb-1 lg:mb-1">
          <div className="text-white font-bold text-sm sm:text-base lg:text-lg">
            CASIO
          </div>
          <div className="text-xs sm:text-sm text-gray-300 italic">
            fx-570ES PLUS
          </div>
        </div>

        {/* Pixel cat animation */}
        <div className="relative bg-white rounded px-1 py-1 inline-block mb-1 sm:mb-2 lg:mb-3 overflow-hidden w-full max-w-xs mx-auto">
          <WalkingCatAnimation />
        </div>
      </div>

      <Display
        expression={formatExpression(expression)}
        result={result}
        isShiftActive={isShiftActive}
        isAlphaActive={isAlphaActive}
        isCalculatorOn={isCalculatorOn}
        currentMode={currentMode}
        graphPoints={graphPoints}
        functionInput={functionInput}
      />
      <Keypad onButtonClick={handleButtonClick} />
    </div>
  );
};

export default Calculator;
