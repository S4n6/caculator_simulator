// C√°c h√†m ti·ªán √≠ch cho m√°y t√≠nh khoa h·ªçc

// Chuy·ªÉn ƒë·ªïi bi·ªÉu th·ª©c t·ª´ notation ng∆∞·ªùi d√πng sang JavaScript
export const preprocessExpression = (expression: string): string => {
  let processed = expression
    // Thay th·∫ø c√°c k√Ω hi·ªáu ƒë·∫∑c bi·ªát
    .replace(/œÄ/g, Math.PI.toString())
    .replace(/√ó/g, "*")
    .replace(/√∑/g, "/")
    .replace(/‚àí/g, "-")
    // X·ª≠ l√Ω Scientific Notation E ‚Üí *10^
    .replace(/(\d+\.?\d*)E([+-]?\d+)/g, "($1*Math.pow(10,$2))")
    .replace(/(\d+\.?\d*)E(\d+)/g, "($1*Math.pow(10,$2))")
    // X·ª≠ l√Ω h·∫±ng s·ªë e (QUAN TR·ªåNG: Sau khi x·ª≠ l√Ω E notation)
    .replace(/(?<!\w)e(?![a-zA-Z_])/g, "Math.E")
    // X·ª≠ l√Ω h√†m khoa h·ªçc c∆° b·∫£n
    .replace(/sin\(/g, "Math.sin(")
    .replace(/cos\(/g, "Math.cos(")
    .replace(/tan\(/g, "Math.tan(")
    .replace(/asin\(/g, "Math.asin(")
    .replace(/acos\(/g, "Math.acos(")
    .replace(/atan\(/g, "Math.atan(")
    // X·ª≠ l√Ω h√†m hyperbolic (cho ch·∫ø ƒë·ªô ALPHA)
    .replace(/sinh\(/g, "Math.sinh(")
    .replace(/cosh\(/g, "Math.cosh(")
    .replace(/tanh\(/g, "Math.tanh(")
    // X·ª≠ l√Ω logarithm
    .replace(/log\(/g, "Math.log10(")
    .replace(/ln\(/g, "Math.log(")
    // X·ª≠ l√Ω cƒÉn
    .replace(/sqrt\(/g, "Math.sqrt(")
    .replace(/cbrt\(/g, "Math.cbrt(")
    // X·ª≠ l√Ω exponential
    .replace(/e\^/g, "Math.exp(")
    .replace(/exp\(/g, "Math.exp(")
    .replace(/10\^\(/g, "Math.pow(10,")
    // X·ª≠ l√Ω c√°c h√†m m·ªõi fx-570ES PLUS
    .replace(/‚à´\(/g, "integral(")
    .replace(/d\/dx\(/g, "derivative(")
    .replace(/log_(\d+)\(/g, "logBase($1,")
    .replace(/(\d+)P(\d+)/g, "permutation($1,$2)")
    .replace(/(\d+)C(\d+)/g, "combination($1,$2)")
    // X·ª≠ l√Ω l≈©y th·ª´a
    .replace(/\^2/g, "**2")
    .replace(/\^3/g, "**3")
    .replace(/\^/g, "**")

    // X·ª≠ l√Ω h·∫±ng s·ªë
    .replace(/œÄ/g, "Math.PI")
    .replace(/e(?![a-zA-Z])/g, "Math.E")

    // X·ª≠ l√Ω ph√©p nh√¢n ng·∫ßm ƒë·ªãnh
    .replace(/(\d)\(/g, "$1*(")
    .replace(/\)(\d)/g, ")*$1")
    .replace(/(\d)(œÄ|Math\.PI|Math\.E)/g, "$1*$2");

  console.log("üîß preprocessExpression output:", processed);

  return processed;
};

// T√≠nh giai th·ª´a
export const factorial = (n: number): number => {
  if (n < 0) return NaN;
  if (n === 0 || n === 1) return 1;
  if (n > 170) return Infinity; // Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh overflow

  let result = 1;
  for (let i = 2; i <= n; i++) {
    result *= i;
  }
  return result;
};

// T√≠nh ho√°n v·ªã nPr
export const permutation = (n: number, r: number): number => {
  if (n < 0 || r < 0 || r > n) return NaN;
  if (r === 0) return 1;

  return factorial(n) / factorial(n - r);
};

// T√≠nh t·ªï h·ª£p nCr
export const combination = (n: number, r: number): number => {
  if (n < 0 || r < 0 || r > n) return NaN;
  if (r === 0 || r === n) return 1;

  return factorial(n) / (factorial(r) * factorial(n - r));
};

// Logarit c∆° s·ªë b·∫•t k·ª≥
export const logBase = (base: number, value: number): number => {
  if (base <= 0 || base === 1 || value <= 0) return NaN;
  return Math.log(value) / Math.log(base);
};

// H√†m t√≠ch ph√¢n ƒë∆°n gi·∫£n (numerical integration - trapezoidal rule)
export const integral = (
  expression: string,
  start: number = 0,
  end: number = 1,
  steps: number = 1000
): number => {
  // ƒê√¢y l√† implementation ƒë∆°n gi·∫£n cho demo
  // Trong th·ª±c t·∫ø s·∫Ω c·∫ßn parser ph·ª©c t·∫°p h∆°n
  const h = (end - start) / steps;
  let sum = 0;

  for (let i = 0; i <= steps; i++) {
    const x = start + i * h;
    // ƒê∆°n gi·∫£n h√≥a: gi·∫£ s·ª≠ expression l√† x^2
    const y = Math.pow(x, 2);
    const weight = i === 0 || i === steps ? 1 : 2;
    sum += weight * y;
  }

  return (sum * h) / 2;
};

// H√†m ƒë·∫°o h√†m ƒë∆°n gi·∫£n (numerical differentiation)
export const derivative = (
  expression: string,
  point: number = 0,
  h: number = 1e-8
): number => {
  // ƒê√¢y l√† implementation ƒë∆°n gi·∫£n cho demo
  // Trong th·ª±c t·∫ø s·∫Ω c·∫ßn parser ph·ª©c t·∫°p h∆°n

  // ƒê∆°n gi·∫£n h√≥a: gi·∫£ s·ª≠ expression l√† x^2, ƒë·∫°o h√†m l√† 2x
  return 2 * point;
};

// X·ª≠ l√Ω bi·ªÉu th·ª©c c√≥ giai th·ª´a
export const processFactorial = (expression: string): string => {
  // T√¨m v√† thay th·∫ø c√°c s·ªë c√≥ d·∫•u ! b·∫±ng factorial
  return expression.replace(/(\d+(?:\.\d+)?)!/g, (_, number) => {
    const num = parseFloat(number);
    return factorial(num).toString();
  });
};

// ƒê√°nh gi√° bi·ªÉu th·ª©c m·ªôt c√°ch an to√†n
export const evaluateExpression = (
  expression: string,
  lastAnswer: string = "0"
): string => {
  try {
    if (!expression || expression.trim() === "") {
      return "0";
    }

    // Thay th·∫ø "Ans" b·∫±ng gi√° tr·ªã lastAnswer
    let processed = expression.replace(/Ans/g, lastAnswer);

    // X·ª≠ l√Ω giai th·ª´a tr∆∞·ªõc
    processed = processFactorial(processed);

    // Ti·ªÅn x·ª≠ l√Ω bi·ªÉu th·ª©c
    processed = preprocessExpression(processed);

    // Th√™m c√°c h√†m m·ªõi v√†o context ƒë√°nh gi√°
    const mathContext = {
      Math,
      factorial,
      permutation,
      combination,
      logBase,
      integral,
      derivative,
    };

    // T·∫°o h√†m ƒë√°nh gi√° v·ªõi context an to√†n
    const safeEval = new Function(
      ...Object.keys(mathContext),
      `return ${processed}`
    );

    // ƒê√°nh gi√° bi·ªÉu th·ª©c v·ªõi context
    const result = safeEval(...Object.values(mathContext));

    if (typeof result !== "number") {
      throw new Error("K·∫øt qu·∫£ kh√¥ng ph·∫£i l√† s·ªë");
    }

    if (isNaN(result)) {
      return "L·ªói";
    }

    if (!isFinite(result)) {
      return result > 0 ? "‚àû" : "-‚àû";
    }

    // L√†m tr√≤n k·∫øt qu·∫£ ƒë·ªÉ tr√°nh l·ªói floating point
    const rounded = Math.round(result * 1e10) / 1e10;

    // ƒê·ªãnh d·∫°ng s·ªë
    if (Math.abs(rounded) < 1e-10) {
      return "0";
    }

    if (Math.abs(rounded) >= 1e10 || Math.abs(rounded) < 1e-6) {
      return rounded.toExponential(6);
    }

    return rounded.toString();
  } catch (error) {
    console.error("L·ªói t√≠nh to√°n:", error);
    return "L·ªói";
  }
};

// Ki·ªÉm tra xem c√≥ th·ªÉ th√™m to√°n t·ª≠ kh√¥ng
export const canAddOperator = (expression: string): boolean => {
  if (!expression) return false;
  const lastChar = expression.slice(-1);
  const operators = ["+", "-", "*", "/", "^", "√ó", "√∑", "‚àí"];
  return !operators.includes(lastChar) && lastChar !== "(";
};

// Ki·ªÉm tra xem c√≥ th·ªÉ th√™m s·ªë kh√¥ng
export const canAddNumber = (expression: string): boolean => {
  if (!expression) return true;
  const lastChar = expression.slice(-1);
  return lastChar !== ")" && lastChar !== "!";
};

// ƒê·ªãnh d·∫°ng bi·ªÉu th·ª©c hi·ªÉn th·ªã
export const formatExpression = (expression: string): string => {
  return expression.replace(/\*/g, "√ó").replace(/\//g, "√∑").replace(/-/g, "‚àí");
};

// T√¨m ∆∞·ªõc chung l·ªõn nh·∫•t (GCD)
export const gcd = (a: number, b: number): number => {
  a = Math.abs(a);
  b = Math.abs(b);
  while (b !== 0) {
    const temp = b;
    b = a % b;
    a = temp;
  }
  return a;
};

// Chuy·ªÉn s·ªë th·∫≠p ph√¢n th√†nh ph√¢n s·ªë
export const decimalToFraction = (decimal: number): string => {
  if (Number.isInteger(decimal)) {
    return decimal.toString();
  }

  const isNegative = decimal < 0;
  decimal = Math.abs(decimal);

  // X·ª≠ l√Ω s·ªë th·∫≠p ph√¢n v·ªõi ƒë·ªô ch√≠nh x√°c h·∫°n ch·∫ø
  const tolerance = 1e-10;
  let denominator = 1;
  let numerator = decimal;

  // T√¨m m·∫´u s·ªë ph√π h·ª£p
  while (
    Math.abs(numerator - Math.round(numerator)) > tolerance &&
    denominator < 10000
  ) {
    denominator++;
    numerator = decimal * denominator;
  }

  numerator = Math.round(numerator);

  // R√∫t g·ªçn ph√¢n s·ªë
  const divisor = gcd(numerator, denominator);
  numerator = numerator / divisor;
  denominator = denominator / divisor;

  // N·∫øu m·∫´u s·ªë l√† 1, tr·∫£ v·ªÅ s·ªë nguy√™n
  if (denominator === 1) {
    return isNegative ? (-numerator).toString() : numerator.toString();
  }

  // Tr·∫£ v·ªÅ ph√¢n s·ªë
  const result = `${numerator}/${denominator}`;
  return isNegative ? `-${result}` : result;
};

// Chuy·ªÉn ph√¢n s·ªë th√†nh s·ªë th·∫≠p ph√¢n
export const fractionToDecimal = (fraction: string): string => {
  // Ki·ªÉm tra xem c√≥ ph·∫£i l√† ph√¢n s·ªë kh√¥ng
  if (!fraction.includes("/")) {
    return fraction;
  }

  try {
    const isNegative = fraction.startsWith("-");
    const cleanFraction = fraction.replace("-", "");
    const parts = cleanFraction.split("/");

    if (parts.length !== 2) {
      return fraction;
    }

    const numerator = parseFloat(parts[0]);
    const denominator = parseFloat(parts[1]);

    if (isNaN(numerator) || isNaN(denominator) || denominator === 0) {
      return fraction;
    }

    const result = numerator / denominator;
    const finalResult = isNegative ? -result : result;

    // L√†m tr√≤n ƒë·∫øn 10 ch·ªØ s·ªë th·∫≠p ph√¢n
    const rounded = Math.round(finalResult * 1e10) / 1e10;

    return rounded.toString();
  } catch (error) {
    return fraction;
  }
};

// Chuy·ªÉn ƒë·ªïi gi·ªØa ph√¢n s·ªë v√† s·ªë th·∫≠p ph√¢n
export const convertBetweenFractionAndDecimal = (value: string): string => {
  if (!value || value === "0" || value === "L·ªói") {
    return value;
  }

  // N·∫øu l√† ph√¢n s·ªë, chuy·ªÉn th√†nh s·ªë th·∫≠p ph√¢n
  if (value.includes("/")) {
    const decimal = fractionToDecimal(value);
    console.log(`üîÑ Fraction to decimal: ${value} ‚Üí ${decimal}`);
    return decimal;
  }

  // N·∫øu l√† s·ªë th·∫≠p ph√¢n, chuy·ªÉn th√†nh ph√¢n s·ªë
  const num = parseFloat(value);
  if (!isNaN(num)) {
    const fraction = decimalToFraction(num);
    console.log(`üîÑ Decimal to fraction: ${value} ‚Üí ${fraction}`);
    return fraction;
  }

  return value;
};
